// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/h5.h"
#include <Rcpp.h>

using namespace Rcpp;

// CreateAttribute_CommonFG
XPtr<Attribute> CreateAttribute_CommonFG(XPtr<CommonFG> loc, string attributename, char datatype, NumericVector dimensions, int size);
RcppExport SEXP h5_CreateAttribute_CommonFG(SEXP locSEXP, SEXP attributenameSEXP, SEXP datatypeSEXP, SEXP dimensionsSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<CommonFG> >::type loc(locSEXP);
    Rcpp::traits::input_parameter< string >::type attributename(attributenameSEXP);
    Rcpp::traits::input_parameter< char >::type datatype(datatypeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dimensions(dimensionsSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    __result = Rcpp::wrap(CreateAttribute_CommonFG(loc, attributename, datatype, dimensions, size));
    return __result;
END_RCPP
}
// CreateAttribute_DataSet
XPtr<Attribute> CreateAttribute_DataSet(XPtr<DataSet> loc, string attributename, char datatype, NumericVector dimensions, int size);
RcppExport SEXP h5_CreateAttribute_DataSet(SEXP locSEXP, SEXP attributenameSEXP, SEXP datatypeSEXP, SEXP dimensionsSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<DataSet> >::type loc(locSEXP);
    Rcpp::traits::input_parameter< string >::type attributename(attributenameSEXP);
    Rcpp::traits::input_parameter< char >::type datatype(datatypeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dimensions(dimensionsSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    __result = Rcpp::wrap(CreateAttribute_DataSet(loc, attributename, datatype, dimensions, size));
    return __result;
END_RCPP
}
// WriteAttribute
bool WriteAttribute(XPtr<Attribute> attribute, SEXP mat, char datatype, NumericVector count);
RcppExport SEXP h5_WriteAttribute(SEXP attributeSEXP, SEXP matSEXP, SEXP datatypeSEXP, SEXP countSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<Attribute> >::type attribute(attributeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mat(matSEXP);
    Rcpp::traits::input_parameter< char >::type datatype(datatypeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type count(countSEXP);
    __result = Rcpp::wrap(WriteAttribute(attribute, mat, datatype, count));
    return __result;
END_RCPP
}
// ReadAttribute
SEXP ReadAttribute(XPtr<Attribute> attribute, NumericVector count);
RcppExport SEXP h5_ReadAttribute(SEXP attributeSEXP, SEXP countSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<Attribute> >::type attribute(attributeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type count(countSEXP);
    __result = Rcpp::wrap(ReadAttribute(attribute, count));
    return __result;
END_RCPP
}
// CloseAttribute
bool CloseAttribute(XPtr<Attribute> attribute);
RcppExport SEXP h5_CloseAttribute(SEXP attributeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<Attribute> >::type attribute(attributeSEXP);
    __result = Rcpp::wrap(CloseAttribute(attribute));
    return __result;
END_RCPP
}
// OpenAttribute_CommonFG
XPtr<Attribute> OpenAttribute_CommonFG(XPtr<CommonFG> loc, string attributename);
RcppExport SEXP h5_OpenAttribute_CommonFG(SEXP locSEXP, SEXP attributenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<CommonFG> >::type loc(locSEXP);
    Rcpp::traits::input_parameter< string >::type attributename(attributenameSEXP);
    __result = Rcpp::wrap(OpenAttribute_CommonFG(loc, attributename));
    return __result;
END_RCPP
}
// OpenAttribute_DataSet
XPtr<Attribute> OpenAttribute_DataSet(XPtr<DataSet> loc, string attributename);
RcppExport SEXP h5_OpenAttribute_DataSet(SEXP locSEXP, SEXP attributenameSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<DataSet> >::type loc(locSEXP);
    Rcpp::traits::input_parameter< string >::type attributename(attributenameSEXP);
    __result = Rcpp::wrap(OpenAttribute_DataSet(loc, attributename));
    return __result;
END_RCPP
}
// GetAttributeType
char GetAttributeType(XPtr<Attribute> attribute);
RcppExport SEXP h5_GetAttributeType(SEXP attributeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<Attribute> >::type attribute(attributeSEXP);
    __result = Rcpp::wrap(GetAttributeType(attribute));
    return __result;
END_RCPP
}
// GetAttributeDimensions
NumericVector GetAttributeDimensions(XPtr<Attribute> attribute);
RcppExport SEXP h5_GetAttributeDimensions(SEXP attributeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<Attribute> >::type attribute(attributeSEXP);
    __result = Rcpp::wrap(GetAttributeDimensions(attribute));
    return __result;
END_RCPP
}
// GetAttributeNames_CommonFG
CharacterVector GetAttributeNames_CommonFG(XPtr<CommonFG> file);
RcppExport SEXP h5_GetAttributeNames_CommonFG(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<CommonFG> >::type file(fileSEXP);
    __result = Rcpp::wrap(GetAttributeNames_CommonFG(file));
    return __result;
END_RCPP
}
// GetAttributeNames_DataSet
CharacterVector GetAttributeNames_DataSet(XPtr<DataSet> file);
RcppExport SEXP h5_GetAttributeNames_DataSet(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<DataSet> >::type file(fileSEXP);
    __result = Rcpp::wrap(GetAttributeNames_DataSet(file));
    return __result;
END_RCPP
}
// WriteDataset
bool WriteDataset(XPtr<DataSet> dataset, XPtr<DataSpace> dataspace, SEXP mat, char datatype, NumericVector count);
RcppExport SEXP h5_WriteDataset(SEXP datasetSEXP, SEXP dataspaceSEXP, SEXP matSEXP, SEXP datatypeSEXP, SEXP countSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<DataSet> >::type dataset(datasetSEXP);
    Rcpp::traits::input_parameter< XPtr<DataSpace> >::type dataspace(dataspaceSEXP);
    Rcpp::traits::input_parameter< SEXP >::type mat(matSEXP);
    Rcpp::traits::input_parameter< char >::type datatype(datatypeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type count(countSEXP);
    __result = Rcpp::wrap(WriteDataset(dataset, dataspace, mat, datatype, count));
    return __result;
END_RCPP
}
// ExtendDataset
bool ExtendDataset(XPtr<DataSet> dset, NumericVector dimsnew);
RcppExport SEXP h5_ExtendDataset(SEXP dsetSEXP, SEXP dimsnewSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<DataSet> >::type dset(dsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dimsnew(dimsnewSEXP);
    __result = Rcpp::wrap(ExtendDataset(dset, dimsnew));
    return __result;
END_RCPP
}
// GetDataSetType
char GetDataSetType(XPtr<DataSet> dataset);
RcppExport SEXP h5_GetDataSetType(SEXP datasetSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<DataSet> >::type dataset(datasetSEXP);
    __result = Rcpp::wrap(GetDataSetType(dataset));
    return __result;
END_RCPP
}
// ReadDataset
SEXP ReadDataset(XPtr<DataSet> dataset, XPtr<DataSpace> dataspace, NumericVector count);
RcppExport SEXP h5_ReadDataset(SEXP datasetSEXP, SEXP dataspaceSEXP, SEXP countSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<DataSet> >::type dataset(datasetSEXP);
    Rcpp::traits::input_parameter< XPtr<DataSpace> >::type dataspace(dataspaceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type count(countSEXP);
    __result = Rcpp::wrap(ReadDataset(dataset, dataspace, count));
    return __result;
END_RCPP
}
// CloseDataset
bool CloseDataset(XPtr<DataSet> dataset);
RcppExport SEXP h5_CloseDataset(SEXP datasetSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<DataSet> >::type dataset(datasetSEXP);
    __result = Rcpp::wrap(CloseDataset(dataset));
    return __result;
END_RCPP
}
// CreateDataset
XPtr<DataSet> CreateDataset(XPtr<CommonFG> file, string datasetname, char datatype, NumericVector dimensions, NumericVector chunksize, NumericVector maxshape, int compressionlevel, int size);
RcppExport SEXP h5_CreateDataset(SEXP fileSEXP, SEXP datasetnameSEXP, SEXP datatypeSEXP, SEXP dimensionsSEXP, SEXP chunksizeSEXP, SEXP maxshapeSEXP, SEXP compressionlevelSEXP, SEXP sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<CommonFG> >::type file(fileSEXP);
    Rcpp::traits::input_parameter< string >::type datasetname(datasetnameSEXP);
    Rcpp::traits::input_parameter< char >::type datatype(datatypeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type dimensions(dimensionsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type chunksize(chunksizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type maxshape(maxshapeSEXP);
    Rcpp::traits::input_parameter< int >::type compressionlevel(compressionlevelSEXP);
    Rcpp::traits::input_parameter< int >::type size(sizeSEXP);
    __result = Rcpp::wrap(CreateDataset(file, datasetname, datatype, dimensions, chunksize, maxshape, compressionlevel, size));
    return __result;
END_RCPP
}
// OpenDataset
XPtr<DataSet> OpenDataset(XPtr<CommonFG> file, string datasetname);
RcppExport SEXP h5_OpenDataset(SEXP fileSEXP, SEXP datasetnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<CommonFG> >::type file(fileSEXP);
    Rcpp::traits::input_parameter< string >::type datasetname(datasetnameSEXP);
    __result = Rcpp::wrap(OpenDataset(file, datasetname));
    return __result;
END_RCPP
}
// GetDataSetDimensions
NumericVector GetDataSetDimensions(XPtr<DataSet> dataset);
RcppExport SEXP h5_GetDataSetDimensions(SEXP datasetSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<DataSet> >::type dataset(datasetSEXP);
    __result = Rcpp::wrap(GetDataSetDimensions(dataset));
    return __result;
END_RCPP
}
// GetDataSetMaxDimensions
NumericVector GetDataSetMaxDimensions(XPtr<DataSet> dataset);
RcppExport SEXP h5_GetDataSetMaxDimensions(SEXP datasetSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<DataSet> >::type dataset(datasetSEXP);
    __result = Rcpp::wrap(GetDataSetMaxDimensions(dataset));
    return __result;
END_RCPP
}
// GetDataSetChunksize
NumericVector GetDataSetChunksize(XPtr<DataSet> dataset);
RcppExport SEXP h5_GetDataSetChunksize(SEXP datasetSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<DataSet> >::type dataset(datasetSEXP);
    __result = Rcpp::wrap(GetDataSetChunksize(dataset));
    return __result;
END_RCPP
}
// GetDataSetCompression
CharacterVector GetDataSetCompression(XPtr<DataSet> dataset);
RcppExport SEXP h5_GetDataSetCompression(SEXP datasetSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<DataSet> >::type dataset(datasetSEXP);
    __result = Rcpp::wrap(GetDataSetCompression(dataset));
    return __result;
END_RCPP
}
// GetDataspace
XPtr<DataSpace> GetDataspace(XPtr<DataSet> dataset);
RcppExport SEXP h5_GetDataspace(SEXP datasetSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<DataSet> >::type dataset(datasetSEXP);
    __result = Rcpp::wrap(GetDataspace(dataset));
    return __result;
END_RCPP
}
// SelectHyperslab
XPtr<DataSpace> SelectHyperslab(XPtr<DataSpace> dataspace, NumericVector offset, NumericVector count, string seloper);
RcppExport SEXP h5_SelectHyperslab(SEXP dataspaceSEXP, SEXP offsetSEXP, SEXP countSEXP, SEXP seloperSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<DataSpace> >::type dataspace(dataspaceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type count(countSEXP);
    Rcpp::traits::input_parameter< string >::type seloper(seloperSEXP);
    __result = Rcpp::wrap(SelectHyperslab(dataspace, offset, count, seloper));
    return __result;
END_RCPP
}
// SelectElem
XPtr<DataSpace> SelectElem(XPtr<DataSpace> dataspace, NumericMatrix coords);
RcppExport SEXP h5_SelectElem(SEXP dataspaceSEXP, SEXP coordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<DataSpace> >::type dataspace(dataspaceSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type coords(coordsSEXP);
    __result = Rcpp::wrap(SelectElem(dataspace, coords));
    return __result;
END_RCPP
}
// SelectAll
XPtr<DataSpace> SelectAll(XPtr<DataSpace> dataspace);
RcppExport SEXP h5_SelectAll(SEXP dataspaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<DataSpace> >::type dataspace(dataspaceSEXP);
    __result = Rcpp::wrap(SelectAll(dataspace));
    return __result;
END_RCPP
}
// CloseDataspace
bool CloseDataspace(XPtr<DataSpace> dataspace);
RcppExport SEXP h5_CloseDataspace(SEXP dataspaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<DataSpace> >::type dataspace(dataspaceSEXP);
    __result = Rcpp::wrap(CloseDataspace(dataspace));
    return __result;
END_RCPP
}
// OpenFile
XPtr<H5File> OpenFile(string filePath, string mode);
RcppExport SEXP h5_OpenFile(SEXP filePathSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< string >::type filePath(filePathSEXP);
    Rcpp::traits::input_parameter< string >::type mode(modeSEXP);
    __result = Rcpp::wrap(OpenFile(filePath, mode));
    return __result;
END_RCPP
}
// CloseFile
bool CloseFile(XPtr<H5File> file);
RcppExport SEXP h5_CloseFile(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<H5File> >::type file(fileSEXP);
    __result = Rcpp::wrap(CloseFile(file));
    return __result;
END_RCPP
}
// FlushFile
bool FlushFile(XPtr<H5File> file);
RcppExport SEXP h5_FlushFile(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<H5File> >::type file(fileSEXP);
    __result = Rcpp::wrap(FlushFile(file));
    return __result;
END_RCPP
}
// IsHDF5File
bool IsHDF5File(string fname);
RcppExport SEXP h5_IsHDF5File(SEXP fnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< string >::type fname(fnameSEXP);
    __result = Rcpp::wrap(IsHDF5File(fname));
    return __result;
END_RCPP
}
// CreateGroup
XPtr<Group> CreateGroup(XPtr<CommonFG> file, string groupname);
RcppExport SEXP h5_CreateGroup(SEXP fileSEXP, SEXP groupnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<CommonFG> >::type file(fileSEXP);
    Rcpp::traits::input_parameter< string >::type groupname(groupnameSEXP);
    __result = Rcpp::wrap(CreateGroup(file, groupname));
    return __result;
END_RCPP
}
// OpenGroup
XPtr<Group> OpenGroup(XPtr<CommonFG> file, string groupname);
RcppExport SEXP h5_OpenGroup(SEXP fileSEXP, SEXP groupnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<CommonFG> >::type file(fileSEXP);
    Rcpp::traits::input_parameter< string >::type groupname(groupnameSEXP);
    __result = Rcpp::wrap(OpenGroup(file, groupname));
    return __result;
END_RCPP
}
// CloseGroup
bool CloseGroup(XPtr<Group> group);
RcppExport SEXP h5_CloseGroup(SEXP groupSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<Group> >::type group(groupSEXP);
    __result = Rcpp::wrap(CloseGroup(group));
    return __result;
END_RCPP
}
// ExistsGroup
bool ExistsGroup(XPtr<CommonFG> file, string groupname);
RcppExport SEXP h5_ExistsGroup(SEXP fileSEXP, SEXP groupnameSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<CommonFG> >::type file(fileSEXP);
    Rcpp::traits::input_parameter< string >::type groupname(groupnameSEXP);
    __result = Rcpp::wrap(ExistsGroup(file, groupname));
    return __result;
END_RCPP
}
// GetGroupNames
CharacterVector GetGroupNames(XPtr<CommonFG> file, string path, bool recursive);
RcppExport SEXP h5_GetGroupNames(SEXP fileSEXP, SEXP pathSEXP, SEXP recursiveSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<CommonFG> >::type file(fileSEXP);
    Rcpp::traits::input_parameter< string >::type path(pathSEXP);
    Rcpp::traits::input_parameter< bool >::type recursive(recursiveSEXP);
    __result = Rcpp::wrap(GetGroupNames(file, path, recursive));
    return __result;
END_RCPP
}
// GetDataSetNames
CharacterVector GetDataSetNames(XPtr<CommonFG> file, string path);
RcppExport SEXP h5_GetDataSetNames(SEXP fileSEXP, SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<CommonFG> >::type file(fileSEXP);
    Rcpp::traits::input_parameter< string >::type path(pathSEXP);
    __result = Rcpp::wrap(GetDataSetNames(file, path));
    return __result;
END_RCPP
}
// Unlink
bool Unlink(XPtr<CommonFG> file, string path);
RcppExport SEXP h5_Unlink(SEXP fileSEXP, SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< XPtr<CommonFG> >::type file(fileSEXP);
    Rcpp::traits::input_parameter< string >::type path(pathSEXP);
    __result = Rcpp::wrap(Unlink(file, path));
    return __result;
END_RCPP
}
